{"id":"2Qhhdda6Qnbf8RCfUPd4nB9sSt2WDQfEpF7H3gCnZZ4AsfbGMy3RmrCa6gigGY6TkbrrJn4wmHXXNYcVj1bK","title":"top scoring links : rust","displayTitle":"Reddit - Rust","url":"https://www.reddit.com/r/rust/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/rust/top/?sort=top&t=day&limit=6","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":6,"items":[{"title":"introducing coral: a BLAS implementation in Rust for AArch64","url":"https://github.com/devdeliw/coral","date":1762031626,"author":"/u/Zealousideal-End9269","guid":611,"unread":true,"content":"   submitted by   <a href=\"https://www.reddit.com/user/Zealousideal-End9269\"> /u/Zealousideal-End9269 </a>","contentLength":43,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1olz87p/introducing_coral_a_blas_implementation_in_rust/"},{"title":"Do I need to think in accordance to endianness for SIMD?","url":"https://www.reddit.com/r/rust/comments/1olsaxo/do_i_need_to_think_in_accordance_to_endianness/","date":1762014860,"author":"/u/playbahn","guid":612,"unread":true,"content":"<p>For context, I have never really read about about SIMD, apart for YT etc. But I  fascinated about SIMD, and I came across this article below.</p><p>In <a href=\"https://mcyoung.xyz/2023/11/27/simd-base64/#riffling-the-sextets\">Designing a SIMD Algorithm from Scratch</a> the author is doing all sorts of bit manipulation like reversing the bits and changing their endianness: ``` fn bits(value: u32) -&gt; String { let [b1, b2, b3, b4] = value.reverse_bits().to_le_bytes(); format!(\"{b1:08b} {b2:08b} {b3:08b} {b4:08b}\") }</p><p>fn decode_pack(input: [u8; 4]) { let mut output = 0u32; for byte in input { output &lt;&lt;= 6; output |= byte as u32; } output &lt;&lt;= 8;</p><p>println!(\"{}\\n{}\\n\", bits(u32::from_be_bytes(input)), bits(output)); }</p><p>decode_pack([0b111111, 0, 0, 0]); decode_pack([0, 0b111111, 0, 0]); decode_pack([0, 0, 0b111111, 0]); decode_pack([0, 0, 0, 0b111111]); ``` I do (kind of) understand where a bit from input will end up in in the output, but why are we doing all this? Why don't we just not reverse the bits, and show them as they are, i.e. Big Endian (I do get our CPUs are mostly LE, but BE is simpler). When writing SIMD code, do we always have to think in terms of LE?</p>","contentLength":1083,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Cycle-accurate 6502 emulator as coroutine in Rust","url":"https://github.com/bagnalla/6502","date":1762008293,"author":"/u/bagnalla","guid":614,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1olpls5/cycleaccurate_6502_emulator_as_coroutine_in_rust/"},{"title":"Async Rust explained without Tokio or Smol","url":"https://youtu.be/_x61dSP4ZKM?si=XPDtuH13Du-s5KTD","date":1762005654,"author":"/u/Gisleburt","guid":615,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1olokba/async_rust_explained_without_tokio_or_smol/"},{"title":"Hard Rust requirements from May onward (for Debian's package manager, APT)","url":"https://lists.debian.org/debian-devel/2025/10/msg00285.html","date":1761999882,"author":"/u/DeleeciousCheeps","guid":616,"unread":true,"content":"<pre>Hi all,\n\nI plan to introduce hard Rust dependencies and Rust code into\nAPT, no earlier than May 2026. This extends at first to the\nRust compiler and standard library, and the Sequoia ecosystem.\n\nIn particular, our code to parse .deb, .ar, .tar, and the\nHTTP signature verification code would strongly benefit\nfrom memory safe languages and a stronger approach to\nunit testing.\n\nIf you maintain a port without a working Rust toolchain,\nplease ensure it has one within the next 6 months, or\nsunset the port.\n\nIt's important for the project as whole to be able to\nmove forward and rely on modern tools and technologies\nand not be held back by trying to shoehorn modern software\non retro computing devices.\n\nThank you for your understanding.\n-- \ndebian developer - deb.li/jak | jak-linux.org - free software dev\nubuntu core developer                              i speak de, en\n</pre>","contentLength":874,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1olmhxe/hard_rust_requirements_from_may_onward_for/"},{"title":"Prevent laptop's temp raises significantly during compiling","url":"https://www.reddit.com/r/rust/comments/1olfwxy/prevent_laptops_temp_raises_significantly_during/","date":1761974575,"author":"/u/blade_012","guid":613,"unread":true,"content":"<p>When compiling <a href=\"http://fyrox.rs\">Fyrox</a> for the first time, my laptop temperature raised significantly from 40°C to 90°C and stays in 90°C for long time until the compilation done. </p><p>Is there any way to cap the compilation activity so that it won't use up all my CPU during the process? I don't mind having the process take a bit longer as long it's safe for my poor small Dell Latitude 7290.</p>","contentLength":374,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev"]}